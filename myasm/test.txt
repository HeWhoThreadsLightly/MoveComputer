#comment on first line

reset: 	#print hello world
	A A #noop first instruction to avoid UB during reset
	LOAD 0xff		B TTY
	LOAD ord("C")	B TTY
	LOAD ord("o")	B TTY
	LOAD ord("l")	B TTY
	LOAD ord("l")	B TTY
	LOAD ord("a")	B TTY
	LOAD ord("t")	B TTY
	LOAD ord("z")	B TTY
	LOAD ord(" ")	B TTY
	LOAD ord("c")	B TTY
	LOAD ord("o")	B TTY
	LOAD ord("n")	B TTY
	LOAD ord("j")	B TTY
	LOAD ord("e")	B TTY
	LOAD ord("c")	B TTY
	LOAD ord("t")	B TTY
	LOAD ord("u")	B TTY
	LOAD ord("r")	B TTY
	LOAD ord("e")	B TTY
	LOAD ord("\n")	B TTY
	#LOAD 0x11	B PAUSE
	#define addres space for program global vars
	n3	=	S+1
	n2	=	S+2
	n1	=	S+3
	n0	=	S+4
	zero =	S+5
	
	
	
	#load constants
	LOAD 0
	B zero
	PCSr RAND	#set higer bytes of PCtmp to zero by loading current addres
	
	
	
begin:	LOAD 1	zero n3		zero n2		zero n1	 RAND n0 #load a new value in to n
mainLoop:
	#BCD print current value
	bcd  = S+16
	
	bcd8 = bcd
	bcd7 = bcd+1
	bcd6 = bcd+2
	bcd5 = bcd+3
	bcd4 = bcd+4
	
	bcd3 = bcd+5
	bcd2 = bcd+6
	bcd1 = bcd+7
	bcd0 = bcd+8
	
	bcdLoopCount = bcd+9
	
	#setup loop counter and copy n in to a big region of memory that will fit bcd expanded value
	LOAD 32
	B bcdLoop
	zero bcd8
	zero bcd7
	zero bcd6
	zero bcd5
	zero bcd4
	n3 bcd3
	n2 bcd2
	n1 bcd1
	n0 bcd0
	zero E
	#setup the jump back in the BCD loop
	bcdJumpBack = bcdLoop-bcdLoopEnd
	LOAD bcdJumpBack	B RJR	#load jump back constant
	LOAD 32	B bcdLoopCount		#set loop counter
	0 0 0 0 0 0 0 0	#sliding winow as target for the jump wihle debugging
bcdLoop:
	#LOAD 0x22	B PAUSE	#PAUSE at begining of loop
	#shift up the lower bits
	LOAD 1
	bcd0 A	LSL bcd0	
	bcd1 A	LSL bcd1
	bcd2 A	LSL bcd2
	bcd3 A	LSL bcd3
	
	#use the bcd accelerator to apply the add 3 if greather or equal to five rule
	LOAD 0x43
	bcd4 A	BCDa bcd4
	bcd5 A	BCDa bcd5
	bcd6 A	BCDa bcd6
	bcd7 A	BCDa bcd7
	bcd8 A	BCDa bcd8
	#LOAD 0x30	B PAUSE	#PAUSE before decrement
	#decrement the loop counter
	bcdLoopCount A	DEC A
	A	bcdLoopCount	
	#LOAD 0x33	B PAUSE	#PAUSE before jump
	A BNZw
bcdLoopEnd:	

	#LOAD 0x44	B PAUSE	#PAUSE before print
	
	#print the result
	zero E
	bcd8 A	LOAD 4	LSR A	E S	zero E	LOAD ord("0")	ADD TTY	S A	ADD TTY
	bcd7 A	LOAD 4	LSR A	E S	zero E	LOAD ord("0")	ADD TTY	S A	ADD TTY
	bcd6 A	LOAD 4	LSR A	E S	zero E	LOAD ord("0")	ADD TTY	S A	ADD TTY
	bcd5 A	LOAD 4	LSR A	E S	zero E	LOAD ord("0")	ADD TTY	S A	ADD TTY
	bcd4 A	LOAD 4	LSR A	E S	zero E	LOAD ord("0")	ADD TTY	S A	ADD TTY
	
	LOAD ord("\n")
	B TTY
	#Apply Collatz logic
	#load jump back to begining 
	LOAD begin	B PC0
	
	#LOAD 0x54	B PAUSE	#PAUSE before test if zero
	#test if n is 0 then reset
	#xor with 1 and test if zero by counting set bits
	LOAD 1
	n0 A	XOR A	COUNT B
	n1 A	COUNT A	ADD	B
	n2 A	COUNT A	ADD	B
	n3 A	COUNT A	ADD	A
	LOAD 0x55	B PAUSE	#PAUSE before print
	LOAD 0b10	B E	COMP JNZw	#jump if zero
	
	#load the continue pointer for later
	LOAD mainLoop	B PC0

	#else apply Collatz logic
	#test if even/odd
	CollatzJump = odd-even
	LOAD CollatzJump	B RJR	#load jump over constant
	
	#LOAD 0x56	B PAUSE	#PAUSE before jump

	LOAD 1
	n0 A	AND	BNZw
even:
	n3 A	LSR	n3
	n2 A	LSR	n2
	n1 A	LSR	n1
	n0 A	LSR	n0
	#jump to continue
	JMPr RAND
odd:
	t	= S+16
	t3	= t+0
	t2	= t+1
	t1	= t+2
	t0	= t+3
	
	n3 t3
	n2 t2
	n1 t1
	n0 t0
	#LOAD 0x57	B PAUSE	#PAUSE before add
	LOAD 1	B E
	n0 A	t0	B	ADD	n0
	n1 A	t1	B	ADD	n1
	n2 A	t2	B	ADD	n2
	n3 A	t3	B	ADD	n3
	
	zero E
	n0 A	t0	B	ADD	n0
	n1 A	t1	B	ADD	n1
	n2 A	t2	B	ADD	n2
	n3 A	t3	B	ADD	n3
	
	#jump to continue
	JMPr RAND
	






